入库出库管理系统

移动端应用（员工A/B/C/D/E使用）

      二维码扫描功能：

            支持通过手机、平板等移动设备的摄像头扫描二维码，快速获取批次ID。

            扫描响应速度快，识别率高。

      操作提示：

            根据当前员工的岗位，明确提示当前操作步骤（例如：入库扫描、贴膜扫描等）。

            在扫描成功或失败时，提供明确的提示信息。

            当流程顺序错误时，例如员工B在未入库的情况下扫描，需要提示错误信息，并明确指出需要先完成的步骤。

            当扫描到重复批次ID时，提示“操作失败，重复批次ID：[批次ID]”。

      网络通信：

            扫描获取批次ID后，能够通过网络将数据实时传输到后端服务器。

            网络异常时，能够提示用户，并具有一定的断线重连机制。
      
      具体说明：

            员工A负责入库：用苹果手机、ipad、安卓手机、安卓平板，这些移动设备通过软件打开摄像头扫描二维码得到批次ID(例如：24B0256)这个ID通过网络传入到后端代码进行处理

            员工B负责贴膜：用苹果手机、ipad、安卓手机、安卓平板，这些移动设备通过软件打开摄像头扫描二维码得到批次ID(例如：24B0256)这个ID通过网络传入到后端代码进行处理

            员工C负责切割：用苹果手机、ipad、安卓手机、安卓平板，这些移动设备通过软件打开摄像头扫描二维码得到批次ID(例如：24B0256)这个ID通过网络传入到后端代码进行处理

            员工D负责检验：用苹果手机、ipad、安卓手机、安卓平板，这些移动设备通过软件打开摄像头扫描二维码得到批次ID(例如：24B0256)这个ID通过网络传入到后端代码进行处理

            员工E负责出货：用苹果手机、ipad、安卓手机、安卓平板，这些移动设备通过软件打开摄像头扫描二维码得到批次ID(例如：24B0256)这个ID通过网络传入到后端代码进行处理

      强调：
            
            批次ID(例如：24B0256)具有唯一性，若是员工A、员工B、员工C、员工D、员工E     重复扫描得到某个批次ID传入后端代码，那么这个员工使用扫码设备上会提示“操作失败，重复批次ID：[批次ID]”

后端系统

      数据接收与处理：

            接收移动端上传的批次ID和操作类型（入库、贴膜、切割、检验、出货）。

            记录每次操作的时间（年、月、日、小时、分钟、秒）。

            严格按照“入库 -> 贴膜 -> 切割 -> 检验 -> 出货”的顺序进行数据校验。

            对于不符合流程顺序的操作，拒绝记录并返回错误信息给移动端。

            检查批次ID的唯一性，防止在同一环节重复记录。

      数据存储：

            使用数据库存储数据，保证数据的持久性和可靠性。

            设计五张独立的表：入库表、贴膜表、切割表、检验表、出货表，每张表结构相同，包含字段：序号（自增）、批次ID、时间。

      数据查询接口：

            提供API接口，供Web前端获取实时数据。

            支持根据时间范围查询各表数据。

      数据导出功能：

            支持将各表数据导出为Excel表格，方便用户进行数据分析和报表生成。
      
      具体说明：

            下面这是员工A、员工B、员工C、员工D、员工E    ID传入后端代码处理的逻辑功能，数据库一共五张表，分别是：入库表、贴膜表、切割表、检验表、出货表

            1、入库表
            批次ID(例如：24B0256)，记录到表序号为1，记录时间 年 月 日 小时 分钟 秒
            序号  批次         时间
            1     24C0256     2025/3/25/20:30:59
            2     2CB0257     2025/3/25/20:45:52
            3     24BF258     2025/3/25/20:57:34

            2、贴膜表
            批次ID(例如：24B0256)，记录到表序号为1，记录时间 年 月 日 小时 分钟 秒
            序号  批次         时间
            1     24C0256     2025/3/25/20:30:59
            2     2CB0257     2025/3/25/20:45:52
            3     24BF258     2025/3/25/20:57:34

            3、切割表
            批次ID(例如：24B0256)，记录到表序号为1，记录时间 年 月 日 小时 分钟 秒
            序号  批次         时间
            1     24C0256     2025/3/25/20:30:59
            2     2CB0257     2025/3/25/20:45:52
            3     24BF258     2025/3/25/20:57:34

            4、检验表
            批次ID(例如：24B0256)，记录到表序号为1，记录时间 年 月 日 小时 分钟 秒
            序号  批次         时间
            1     24C0256     2025/3/25/20:30:59
            2     2CB0257     2025/3/25/20:45:52
            3     24BF258     2025/3/25/20:57:34

            5、出货表
            批次ID(例如：24B0256)，记录到表序号为1，记录时间 年 月 日 小时 分钟 秒
            序号  批次         时间
            1     24C0256     2025/3/25/20:30:59
            2     2CB0257     2025/3/25/20:45:52
            3     24BF258     2025/3/25/20:57:34
      
      强调：
            必须是经过严格的顺序  入库->贴膜->切割->检验->出货
            实现对物料批次的全流程追踪管理，从入库到出库，确保每个环节可追溯
            例如某个批次ID没有经过员工A扫码入库操作，直接由员工B进行扫码贴膜操作，那么员工B使用扫码设备上会显示操作失败，请1.扫码入库
            例如某个批次ID没有经过员工A扫码入库操作，以及没有经过员工B扫码贴膜操作，那么员工C使用扫码设备上会显示操作失败，请1.扫码入库 2.扫码贴膜
            例如某个批次ID没有经过员工A扫码入库操作，以及没有经过员工B扫码贴膜操作，以及没有经过员工C扫码切割操作，那么员工D使用扫码设备上会显示操作失败，请1.扫码入库 2.扫码贴膜 3.扫码切割
            例如某个批次ID没有经过员工A扫码入库操作，以及没有经过员工B扫码贴膜操作，以及没有经过员工C扫码切割操作，以及没有经过员工D扫码检验操作，那么员工E使用扫码设备上会显示操作失败，请1.扫码入库 2.扫码贴膜 3.扫码切割 4.扫码检验

Web前端

      实时数据展示：

            实时显示入库表、贴膜表、切割表、检验表、出货表的数据更新状态。

            界面简洁直观，方便管理人员实时监控各环节的进度。

      数据筛选与导出：

            提供时间筛选功能，用户可以根据时间段查看各表的数据。

            提供数据导出功能，用户可以将筛选后的数据导出为Excel文件。
      具体说明：
            WEB前端需要实时关注到入库表、贴膜表、切割表、检验表、出货表   实时的状态需要动态的显示这些数据的状态
            在WEB前端上可以根据时间筛选导出    入库表、贴膜表、切割表、检验表、出货表     Excel表单

非功能需求

      性能需求：

            响应速度： 移动端扫描二维码后，数据上传和后端处理应快速完成，用户等待时间短。Web前端数据刷新应及时。

            稳定性： 系统需要稳定运行，不易崩溃，保证数据的可靠记录。

            并发性： 系统需要支持多用户同时操作，能够处理多个移动端设备并发上传的数据。

      易用性需求：

            操作简便： 移动端和Web前端操作界面应简洁直观，易于上手。

            用户体验： 提供友好的用户界面和操作提示，提升用户体验。

      可维护性：

            代码结构清晰，模块化设计，方便后期维护和升级。

            提供必要的日志记录，方便问题排查。

      可扩展性：

            系统架构应具有一定的可扩展性，方便未来扩展功能或增加用户量。

运行环境

      移动端： 支持iOS (苹果手机、iPad)、Android (安卓手机、安卓平板) 操作系统。

      后端： Ubuntu，Node.js+Mysql。

      Web前端： 主流浏览器 (Chrome, Firefox, Safari, Edge)。

代码架构
      本系统采用前后端分离的架构模式，主要包括以下几个部分：

      移动端应用 (Mobile App): 负责二维码扫描、数据采集和用户交互。

      后端API (Backend API): 负责接收移动端数据、业务逻辑处理、数据存储和提供API接口。

      Web前端 (Web Frontend): 负责数据展示、用户操作界面和数据导出。

      数据库 (Database): 负责数据持久化存储。

架构图
+-------------------+       +-------------------+       +-------------------+       +-------------------+
|  移动端应用 (Mobile App) |----->|  后端API (Backend API) |----->|  Web前端 (Web Frontend)|----->|  数据库 (Database)  |
| (iOS/Android)     |       | (     Node.js)    |       | (React/Vue/Angular) |       | (      MySQL     )|
+-------------------+       +-------------------+       +-------------------+       +-------------------+
      ↑                                 ↑                                 ↑
      |                                 |                                 |
      -----------------------------------------------------------------------
                                     网络通信 (HTTP)

技术选型：
移动端: 可以使用原生开发 (Swift/Kotlin) 或跨平台框架 (React Native, Flutter)。 考虑到效率和多平台支持，跨平台框架可能更合适。

后端: Node.js (Express)，Node.js 在轻量级应用和实时性方面有优势。

数据库: MySQL关系型数据库。

Web前端: React, Vue, Angular 等主流前端框架都可以。